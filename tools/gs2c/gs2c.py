#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Convert a music .asm file generated by MIDI2GSC so it does not depend on pkms.asm.
"""

from __future__ import print_function

import sys
import os.path

def parseint(s):
	if s.startswith('$'):
		return int(s[1:], 16)
	elif s.startswith('%'):
		return int(s[1:], 2)
	return int(s)

def hexint(n):
	return '$' + hex(n)[2:].upper()

def convert(filename):
	lines = []
	with open(filename, 'r') as f:
		for line in f:
			line = line.strip()
			line = convert_line(line)
			if not(line.startswith('@') or line.endswith(':') or not line):
				line = '\t' + line
			lines.append(line)
	return '\n'.join(lines)

def convert_line(line):
	line = line.replace(',', ', ').replace('|', ' | ').replace('  ', ' ').replace(';', '@')

	# Example: musicheader 4, 1, X == channel 1, X
	if line.startswith('musicheader'):
		_, _, num, name = line.split()
		num = num[0]
		name = name.strip()
		return 'channel %s, %s' % (num, name)

	# Example: note A#, 1 == note As, 1
	if line.startswith('note '):
		_, note, length = line.split()
		note = note[:2]
		length = length.strip()
		if note == '__':
			return 'rest %s' % (length)
		if note[1] == '#':
			note = note[0] + 's'
		return 'note %s, %s' % (note, length)

	# Example: notetype 12, $a7 == note_type 12, 10, 7
	if line.startswith('notetype'):
		if (len(line.split()) == 2):
			_, speed = line.split()
			speed = parseint(speed)
			return 'drum_speed %s' % (speed)
		else:
			_, arg1, arg2 = line.split()
			arg1 = parseint(arg1.rsplit(',')[0])
			arg3 = parseint(arg2[-1])
			arg2 = parseint(arg2[:-1])
			return 'note_type %s, %s, %s' % (arg1, arg2, arg3)

	# Example: dutycycle $0 == duty_cycle 0
	if line.startswith('dutycycle'):
		_, arg1 = line.split()
		arg1 = parseint(arg1)
		return 'duty_cycle %s' % (arg1)

	# Example: volume $a7 == volume 10, 7
	if line.startswith('volume'):
		_, arg1 = line.split()
		arg2 = parseint(arg1[-1])
		arg1 = parseint(arg1[:-1])
		return 'volume %s, %s' % (arg1, arg2)

	# Example: intensity $a7 == volume_envelope 10, 7
	if line.startswith('intensity'):
		_, arg1 = line.split()
		arg2 = parseint(arg1[-1])
		arg1 = parseint(arg1[:-1])
		return 'volume_envelope %s, %s' % (arg1, arg2)
	
	# Example: vibrato 12, $a7 == vibrato 12, 10, 7
	if line.startswith('vibrato'):
		_, arg1, arg2 = line.split()
		arg1 = parseint(arg1.rsplit(',')[0])
		arg3 = parseint(arg2[-1])
		arg2 = parseint(arg2[-1:])
		return 'vibrato %s, %s, %s' % (arg1, arg2, arg3)
	
	# Example: tone $0002 == pitch_offset 2
	if line.startswith('tone'):
		_, arg1 = line.split()
		arg1 = parseint(arg1)
		return 'pitch_offset %s' % (arg1)
	
	# Example: togglenoise 3 == toggle_noise 3
	if line.startswith('togglenoise'):
		_, arg1 = line.split()
		arg1 = parseint(arg1)
		return 'toggle_noise %s' % (arg1)

	# Example: callchannel X == sound_call X
	if line.startswith('callchannel'):
		_, channel = line.split(None, 2)
		channel = channel.strip()
		return 'sound_call %s' % (channel)

	# Example: loopchannel 0, X == sound_loop 0, X
	if line.startswith('loopchannel'):
		_, value, channel, = line.split()
		value = value[0]
		channel = channel.strip()
		return 'sound_loop %s, %s' % (value, channel)
	
	# Example: endchannel == sound_ret
	if line.startswith('endchannel'):
		return 'sound_ret'

	if line.startswith('@') or line.startswith('.') or line.endswith(':') or not line:
		return line

	return line + ' % WARNING: unconverted'

def write(content, old_filename):
	name, ext = os.path.splitext(old_filename)
	new_filename = name + '_c' + '.' + ext
	with open(new_filename, 'w') as f:
		f.write(content)

def main():
	if len(sys.argv) < 2:
		usage = '''Usage: %s file.asm
       Convert a music .asm file generated by MIDI2GSC so it does not
       depend on pkms.asm'''
		print(usage % sys.argv[0], file=sys.stderr)
		sys.exit(1)
	filename = sys.argv[1]
	content = convert(filename)
	write(content, filename)

if __name__ == '__main__':
	main()
